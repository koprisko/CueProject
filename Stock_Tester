import calendar as cal
import pandas as pd
import datetime as dt
import re
import requests
try:
    from io import StringIO
except ImportError:
    from StringIO import StringIO
    
import csv
import statistics

from numpy import exp, array, random, dot
import LoadCSV_V2
import matplotlib.pyplot as plt

class Fetcher:
    import calendar as cal
    import pandas as pd
    import datetime as dt
    import re
    import requests
    api_url = "https://query1.finance.yahoo.com/v7/finance/download/%s?period1=%s&period2=%s&interval=%s&events=%s&crumb=%s"
    def __init__(self, ticker, start, end=None, interval="1d"):
        """Initializes class variables and formats api_url string"""
        self.ticker = ticker.upper()
        self.interval = interval
        self.cookie, self.crumb = self.init()
        self.start = int(cal.timegm(dt.datetime(*start).timetuple()))

        if end is not None:
            self.end = int(cal.timegm(dt.datetime(*end).timetuple()))
        else:
            self.end = int(time.time())

    def init(self):
        """Returns a tuple pair of cookie and crumb used in the request"""
        url = 'https://finance.yahoo.com/quote/%s/history' % (self.ticker)
        r = requests.get(url)
        txt = r.content
        cookie = r.cookies['B']
        pattern = re.compile('.*"CrumbStore":\{"crumb":"(?P<crumb>[^"]+)"\}')

        for line in txt.splitlines():
            m = pattern.match(line.decode("utf-8"))
            if m is not None:
                crumb = m.groupdict()['crumb']
                crumb = crumb.replace(u'\\u002F', '/')
        return cookie, crumb  # return a tuple of crumb and cookie

    def getData(self, events):
        """Returns a list of historical data from Yahoo Finance"""
        if self.interval not in ["1d", "1wk", "1mo"]:
            raise ValueError("Incorrect interval: valid intervals are 1d, 1wk, 1mo")

        url = self.api_url % (self.ticker, self.start, self.end, self.interval, events, self.crumb)

        data = requests.get(url, cookies={'B':self.cookie})
        content = StringIO(data.content.decode("utf-8"))
        return pd.read_csv(content, sep=',')

    def getHistorical(self, events='history'):
        """Returns a list of historical price data from Yahoo Finance"""
        return self.getData('history')

    def getDividends(self):
        """Returns a list of historical dividends data from Yahoo Finance"""
        return self.getData('div')

    def getSplits(self):
        """Returns a list of historical splits data from Yahoo Finance"""
        return self.getData('split')

    def getDatePrice(self):
        """Returns a DataFrame for Date and Price from getHistorical()"""
        return self.getHistorical().ix[:,[0,4]]

    def getDateVolume(self):
        """Returns a DataFrame for Date and Volume from getHistorical()"""
        return self.getHistorical().ix[:,[0,6]]
    
    
class NeuralNetwork():
    from numpy import exp, array, random, dot
    def __init__(self):
        # Seed the random number generator, so it generates the same numbers
        # every time the program runs.
        random.seed(1)

        # We model a single neuron, with 4 input connections and 1 output connection.
        # We assign random weights to a 4 x 1 matrix, with values in the range -1 to 1
        # and mean 0.
        self.synaptic_weights = 2 * random.random((4, 1)) - 1

    # The Sigmoid function, which describes an S shaped curve.
    # We pass the weighted sum of the inputs through this function to
    # normalise them between 0 and 1.
    def __sigmoid(self, x):
        return ((1 / (1 + exp(-x))))

    # The derivative of the Sigmoid function.
    # This is the gradient of the Sigmoid curve.
    # It indicates how confident we are about the existing weight.
    def __sigmoid_derivative(self, x):
        return (x * (1 - x))

    # We train the neural network through a process of trial and error.
    # Adjusting the synaptic weights each time.
    def train(self, training_set_inputs, training_set_outputs, number_of_training_iterations):
        for iteration in range(number_of_training_iterations):
            # Pass the training set through our neural network (a single neuron).
            output = self.think(training_set_inputs)
            # Calculate the error (The difference between the desired output
            # and the predicted output).
            error = training_set_outputs - output

            # Multiply the error by the input and again by the gradient of the Sigmoid curve.
            # This means less confident weights are adjusted more.
            # This means inputs, which are zero, do not cause changes to the weights.
            adjustment = dot(training_set_inputs.T, error * self.__sigmoid_derivative(output))
            # Adjust the weights.
            self.synaptic_weights += adjustment

    # The neural network thinks.
    def think(self, inputs):
        # Pass inputs through our neural network (our single neuron).
        return self.__sigmoid(dot(inputs, self.synaptic_weights))

class CSV_Normalize:
    import csv
    import statistics
    stock = ""
    
    close_prices = []
    high_prices = []
    low_prices = []
    prev_prices = []
    
    min_close = 1000
    max_close = 0  
    min_high = 1000
    max_high = 0
    min_low = 1000
    max_low = 0
    min_prev = 1000
    max_prev = 0
    
    normalized_close = []
    normalized_high = []
    normalized_low = []
    normalized_prev = []
    
    open_prices = []
    
    min_open= 1000
    max_open = 0
    
    normalized_open = []
    
    inputs = []
    training_inputs = []
    testing_inputs = []
    
    training_outputs = []
    testing_outputs = []
     
    def set_stock(self,stock):
        self.stock = stock
    def set_input(self):
        with open(self.stock + '.csv') as csvfile:
            readCSV = csv.reader(csvfile, delimiter = ',')
            for row in readCSV:
                self.close_prices.append(row[5])
                self.high_prices.append(row[3])
                self.low_prices.append(row[4])
                self.prev_prices.append(row[2])

        self.close_prices = self.close_prices[1:-1]
        self.high_prices = self.high_prices[1:-1]
        self.low_prices = self.low_prices[1:-1]
        self.prev_prices = self.prev_prices[1:-1]

        for m in range(len(self.close_prices)):
            self.close_prices[m] = float(self.close_prices[m])
        for n in range(len(self.high_prices)):
            self.high_prices[n] = float(self.high_prices[n])
        for o in range(len(self.low_prices)):
            self.low_prices[o] = float(self.low_prices[o])
        for pp in range(len(self.prev_prices)):
            self.prev_prices[pp] = float(self.prev_prices[pp])
    
    
        #Set Min and Max values for normalization

        for p in range(len(self.close_prices)):
            if (self.close_prices[p] > self.max_close):
                self.max_close = self.close_prices[p]
            if (self.close_prices[p] < self.min_close):
                self.min_close = self.close_prices[p]
        for q in range(len(self.high_prices)):
            if (self.high_prices[q] > self.max_high):
                self.max_high = self.high_prices[q]
            if (self.high_prices[q] < self.min_high):
                self.min_high = self.high_prices[q]  
        for r in range(len(self.low_prices)):
            if (self.low_prices[r] > self.max_low):
                self.max_low = self.low_prices[r]
            if (self.low_prices[r] < self.min_low):
                self.min_low = self.low_prices[r] 
        for s in range(len(self.prev_prices)):
            if (self.prev_prices[s] > self.max_prev):
                self.max_prev = self.prev_prices[s]
            if (self.prev_prices[s] < self.min_prev):
                self.min_prev = self.prev_prices[r]
        
    def set_normalized_input(self):
        self.set_input()
        for i1 in range(len(self.close_prices)):
            self.normalized_close.append((self.close_prices[i1] - self.min_close)/(self.max_close - self.min_close))
        
        for i2 in range(len(self.high_prices)):
            self.normalized_high.append((self.high_prices[i2] - self.min_high)/(self.max_high - self.min_high))
            
        for i3 in range(len(self.low_prices)):
            self.normalized_low.append((self.low_prices[i3] - self.min_low)/(self.max_low - self.min_low))
    
        for i4 in range(len(self.prev_prices)):
            self.normalized_prev.append((self.prev_prices[i4] - self.min_prev)/(self.max_prev - self.min_prev))
            
    def get_input(self):
        return (list(zip(self.close_prices,self.high_prices,self.low_prices,self.prev_prices)))
    
    def get_nomralized_input(self):
        return (list(zip(self.normalized_close,self.normalized_high,self.normalized_low,self.normalized_prev)))
    
    def set_output(self):
        with open(self.stock + '.csv') as csvfile:
            readCSV = csv.reader(csvfile, delimiter = ',')
            for row in readCSV:
                self.open_prices.append(row[2])
        self.open_prices = self.open_prices[2:]

        for m in range(len(self.open_prices)):
            self.open_prices[m] = float(self.open_prices[m])

        for i in range(len(self.open_prices)):
            if (self.open_prices[i] > self.max_open):
                self.max_open = self.open_prices[i]
            if (self.open_prices[i] < self.min_open):
                self.min_open = self.open_prices[i]
                
    def set_normalized_output(self):
        self.set_output()
        for i1 in range(len(self.open_prices)):
            self.normalized_open.append((self.open_prices[i1] - self.min_open)/(self.max_open - self.min_open))

    def get_output(self):
        return (self.open_prices)
    
    def get_normalized_output(self):
        return (self.normalized_open)
    
    def inverse(self,normalized):
        return ((normalized * (self.max_open - self.min_open)) + self.min_open)
    
    def get_training_input(self):
        self.set_training_input()
        return self.training_inputs
    
    def set_training_input(self):
        for i in range(len(self.normalized_close)):
            temp_list = [self.normalized_close[i],self.normalized_high[i],self.normalized_low[i],self.normalized_prev[i]]
            self.inputs.append(temp_list)
        train_end = int(.7*len(self.inputs))
        self.training_inputs = self.inputs[0:train_end]
    
    def get_testing_input(self):
        self.set_testing_input()
        return self.testing_inputs
    
    def set_testing_input(self):
        for i in range(len(self.normalized_close)):
            temp_list = [self.normalized_close[i],self.normalized_high[i],self.normalized_low[i],self.normalized_prev[i]]
            self.inputs.append(temp_list)
        train_end = int(.7*len(self.inputs))
        self.testing_inputs = self.inputs[train_end+1:]
    
    def get_training_output(self):
        self.set_training_output()
        return self.training_outputs
    def set_training_output(self):
        train_end = int(.7*len(self.normalized_open))
        self.training_outputs = self.normalized_open[0:train_end]
    def get_testing_output(self):
        self.set_testing_output()
        return self.testing_outputs
    def set_testing_output(self):
        train_end = int(.7*len(self.normalized_open))
        self.testing_outputs = self.normalized_open[train_end+1:]
        
        
        
    

    
        
    
def main():
    data = Fetcher('MSFT', [2015,1,1], [2015,2,25],'1d').getHistorical()
    data.to_csv('MSFT.csv')
    
    msft = CSV_Normalize()
    msft.set_stock("MSFT")
    msft.set_normalized_input()
    msft.set_normalized_output()
    training_input = msft.get_training_input()
    test_input = msft.get_testing_input()
    training_output = [msft.get_training_output()]
    test_output = msft.get_testing_output()

    
    neural_network = NeuralNetwork()
    print ("Random starting synaptic weights: ")
    print (neural_network.synaptic_weights)
    
    neural_network.train(array(training_input), array(training_output).T, 100)
    guess = (neural_network.think(array(test_input[0])))
    print ("New synaptic weights after training: ")
    print (neural_network.synaptic_weights)
    print (guess)
    print (test_output[0])
    
    results = []
    amount = []
    actual = []
    
    for n in range(len(test_output)):
        results.append(neural_network.think(array(test_input[n])))
        amount.append(n)
    
    results_regular = []
    
    for i in range(len(results)):
        results_regular.append(msft.inverse(results[i]))
    for o in range(len(test_output)):
        actual.append(msft.inverse(test_output[o]))
        
   # plt.plot(amount, results, label = "predicted")
    plt.plot(amount, results_regular, label = 'predicted')
   # plt.plot(amount, test_output, label = 'actual')
    plt.plot(amount, actual, label = "actual")
    plt.legend()
    plt.show()

    
main()  
    
    
